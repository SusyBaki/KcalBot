import { Options, APIResponse } from './Base';
declare function FBAnimals(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random bird image
 */
declare function FBAnimalsBirb(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random blep image
 */
declare function FBAnimalsBlep(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random cheeta image
 */
declare function FBAnimalsCheeta(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random fox image
 */
declare function FBAnimalsFox(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random lynx image
 */
declare function FBAnimalsLynx(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random wolf image
 */
declare function FBAnimalsWolf(options?: Options): APIResponse;
declare function FBFurry(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry boop image
 */
declare function FBFurryBoop(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random cuddle image
 */
declare function FBFurryCuddle(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry flop image
 */
declare function FBFurryFlop(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random fursuit image
 */
declare function FBFurryFursuit(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry hold image
 */
declare function FBFurryHold(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry howl image
 */
declare function FBFurryHowl(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry hug image
 */
declare function FBFurryHug(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry kiss image
 */
declare function FBFurryKiss(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry lick image
 */
declare function FBFurryLick(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry propose image
 */
declare function FBFurryPropose(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random furry bulge image (NSFW)
 */
declare function FBFurryBulge(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random yiff gay image
 */
declare function FBFurryYiffGay(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random yiff straight image
 */
declare function FBFurryYiffStraight(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random yiff lesbian image
 */
declare function FBFurryYiffLesbian(options?: Options): APIResponse;
/**
 *
 * @param options - Library options
 * @returns - A random yiff gynomorph image
 */
declare function FBFurryYiffGynomorph(options?: Options): APIResponse;
interface FBAnimals {
    /**
     *
     * @param options - Library options
     * @returns - A random animal image
     */
    (options?: Options): APIResponse;
    bird: typeof FBAnimalsBirb;
    blep: typeof FBAnimalsBlep;
    cheeta: typeof FBAnimalsCheeta;
    fox: typeof FBAnimalsFox;
    lynx: typeof FBAnimalsLynx;
    wolf: typeof FBAnimalsWolf;
}
interface FBFurry {
    /**
     *
     * @param options - Library options
     * @returns - A random (sfw) furry image
     */
    (options?: Options): APIResponse;
    yiff: FBYiff;
    boop: typeof FBFurryBoop;
    cuddle: typeof FBFurryCuddle;
    flop: typeof FBFurryFlop;
    fursuit: typeof FBFurryFursuit;
    hold: typeof FBFurryHold;
    howl: typeof FBFurryHowl;
    hug: typeof FBFurryHug;
    kiss: typeof FBFurryKiss;
    lick: typeof FBFurryLick;
    propose: typeof FBFurryPropose;
    bulge: typeof FBFurryBulge;
}
interface FBYiff {
    /**
     *
     * @param options - Library options
     * @returns - A random yiff image
     */
    (options?: Options): APIResponse;
    gay: typeof FBFurryYiffGay;
    straight: typeof FBFurryYiffStraight;
    lesbian: typeof FBFurryYiffLesbian;
    gynomorph: typeof FBFurryYiffGynomorph;
}
export declare interface FB {
    /**
     *
     * @param options - Library options
     * @returns - A random (sfw) image
     */
    (options?: Options): APIResponse;
    animals: FBAnimals;
    furry: FBFurry;
    yiff: FBYiff;
}
declare const _default: FB;
export default _default;
