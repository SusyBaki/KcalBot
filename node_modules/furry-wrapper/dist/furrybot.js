"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Base_1 = require("./Base");
function FBBase(endpoint, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const base = new Base_1.default(options);
        return yield base.query(`https://yiff.rest/v2/${endpoint}?limit=1`, (r => { var _a; return (_a = r.data) === null || _a === void 0 ? void 0 : _a.images[0]; }));
    });
}
class Container {
}
Container.valid = {
    'animals/birb': true,
    'animals/blep': true,
    'animals/cheeta': true,
    'animals/fox': true,
    'animals/lynx': true,
    'animals/wolf': true,
    'furry/boop': true,
    'furry/cuddle': true,
    'furry/flop': true,
    'furry/fursuit': true,
    'furry/hold': true,
    'furry/howl': true,
    'furry/hug': true,
    'furry/kiss': true,
    'furry/lick': true,
    'furry/propose': true,
    'furry/bulge': true,
    'furry/yiff/gay': true,
    'furry/yiff/straight': true,
    'furry/yiff/lesbian': true,
    'furry/yiff/gynomorph': true
};
// I'm too lazy to do these automatically
function FB(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const props = Object.keys(Container.valid).slice(0, 16);
        return yield FBBase(props[Math.floor(props.length * Math.random())], options);
    });
}
function FBAnimals(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const props = Object.keys(Container.valid).slice(0, 16);
        return yield FBBase(props[Math.floor(props.length * Math.random())], options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random bird image
 */
function FBAnimalsBirb(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('animals/birb', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random blep image
 */
function FBAnimalsBlep(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('animals/blep', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random cheeta image
 */
function FBAnimalsCheeta(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('animals/cheeta', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random fox image
 */
function FBAnimalsFox(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('animals/fox', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random lynx image
 */
function FBAnimalsLynx(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('animals/lynx', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random wolf image
 */
function FBAnimalsWolf(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('animals/wolf', options);
    });
}
function FBFurry(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const props = Object.keys(Container.valid).slice(6, 16);
        return yield FBBase(props[Math.floor(props.length * Math.random())], options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry boop image
 */
function FBFurryBoop(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/boop', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random cuddle image
 */
function FBFurryCuddle(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/cuddle', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry flop image
 */
function FBFurryFlop(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/flop', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random fursuit image
 */
function FBFurryFursuit(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/fursuit', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry hold image
 */
function FBFurryHold(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/hold', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry howl image
 */
function FBFurryHowl(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/howl', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry hug image
 */
function FBFurryHug(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/hug', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry kiss image
 */
function FBFurryKiss(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/kiss', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry lick image
 */
function FBFurryLick(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/lick', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry propose image
 */
function FBFurryPropose(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/propose', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random furry bulge image (NSFW)
 */
function FBFurryBulge(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/bulge', options);
    });
}
function FBFurryYiff(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const props = Object.keys(Container.valid).slice(3);
        return yield FBBase(props[Math.floor(props.length * Math.random())], options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random yiff gay image
 */
function FBFurryYiffGay(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/yiff/gay', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random yiff straight image
 */
function FBFurryYiffStraight(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/yiff/straight', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random yiff lesbian image
 */
function FBFurryYiffLesbian(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/yiff/lesbian', options);
    });
}
/**
 *
 * @param options - Library options
 * @returns - A random yiff gynomorph image
 */
function FBFurryYiffGynomorph(options) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield FBBase('furry/yiff/gynomorph', options);
    });
}
// Bundle them all to one function
// Animals
Object.defineProperties(FBAnimals, {
    bird: { value: FBAnimalsBirb },
    blep: { value: FBAnimalsBlep },
    cheeta: { value: FBAnimalsCheeta },
    fox: { value: FBAnimalsFox },
    lynx: { value: FBAnimalsLynx },
    wolf: { value: FBAnimalsWolf }
});
// Yiff
Object.defineProperties(FBFurryYiff, {
    gay: { value: FBFurryYiffGay },
    straight: { value: FBFurryYiffStraight },
    lesbian: { value: FBFurryYiffLesbian },
    gynomorph: { value: FBFurryYiffGynomorph }
});
// Furry
Object.defineProperties(FBFurry, {
    yiff: { value: FBFurryYiff },
    boop: { value: FBFurryBoop },
    cuddle: { value: FBFurryCuddle },
    flop: { value: FBFurryFlop },
    fursuit: { value: FBFurryFursuit },
    hold: { value: FBFurryHold },
    howl: { value: FBFurryHowl },
    hug: { value: FBFurryHug },
    kiss: { value: FBFurryKiss },
    lick: { value: FBFurryLick },
    propose: { value: FBFurryPropose },
    bulge: { value: FBFurryBulge }
});
// Bundle the main function
Object.defineProperties(FB, {
    animals: { value: FBAnimals },
    furry: { value: FBFurry },
    yiff: { value: FBFurryYiff }
});
exports.default = FB;
